import csv
from Tkinter import * 
from tkFileDialog import * 
import mysql.connector
from datetime import datetime
import numpy as np

# ***** Variables ******
controls = []
standards = []
samples = []
standardresults = []
bcrablsample = []
ablsample = []




#***** SQL statements for use in script ******
			
#Inserts Control Results into database. 
controlinsert = (""" 
		INSERT INTO controlresults(wellnumber, resulttypeid, controlct, controlctmean, controlquant, controlquantmean,     			controlctthresh, controlbasestart, controlbaseend, controltypeid)
		VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s);""")
		
controlinsert2 = ("""
		  INSERT INTO plate2control(controlresultid, plateid) 
		  VALUES (LAST_INSERT_ID(), (SELECT plateid FROM plate ORDER BY plateid DESC LIMIT 1));
 		  """)

#Inserts Standard Results into database
standardinsert1 = ("""  
		 INSERT INTO standardresults(wellnumber, resulttypeid, standardct, standardctmean, standardquant, standardquantmean, 			 standardctthresh, standardbasestart, standardbaseend, standardtypeid)
		 VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s);""")

standardinsert2= ("""
		 INSERT INTO plate2standard(standardresultid, plateid)
		 VALUES (LAST_INSERT_ID(), (SELECT plateid FROM plate ORDER BY plateid DESC LIMIT 1));
		 """)

#Inserts sample results into the database
sampleinsert1 = ("""
		INSERT INTO sampleresult(wellnumber, samplect, samplectmean, samplequant, samplequantmean, 			     			samplectthresh, samplebasestart, samplebaseend, resulttypeid)
        	VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s);""")

sampleinsert2 = ("""
		INSERT INTO sampleseg(sampleresultid, sampleid, plateid)
		VALUES (LAST_INSERT_ID(), (SELECT sampleid FROM samples WHERE samplenumber= %s), (SELECT plateid FROM plate ORDER BY plateid DESC LIMIT 1));
		""") 


#**** Internal Functions **********

def platedate(csv):
	if csv:
		try:
			dateofrun = csv[3][1]
			dateofrun = dateofrun[0:10]
			dateofrun = datetime.strptime(dateofrun, '%Y-%m-%d')
			dateofrun = datetime.date(dateofrun)
			cursor.execute("""INSERT INTO plate(dateofrun)
			VALUES (%s)""", ((dateofrun,)))
			cnx.commit()
		except:
			raise Exception ('The plate has no date. Please add a date')


#Function sorts the results in the csv file into POS/NEG/H2O/Standard/Sample and ABL/BCRABL
def resultsort(csv):
	if csv:
		for row in csv:
			if any("POS" in s for s in row):
				if any ("BCR-ABL" in s for s in row):
					del row[2:4]
					row[1] = 2
					row.append(1)
					controls.append(row)
				elif any ("GUS" in s for s in row):
					del row[2:4]
					row[1] = 3
					row.append(1)
					controls.append(row)
				else:
					del row[2:4]
					row[1] = 1
					row.append(1)
					controls.append(row)
			elif any("NEG" in s for s in row): 
				if any ("BCR-ABL" in s for s in row):
					del row[2:4]
					row[1] = 2
					row.append(2)
					controls.append(row)
				elif any ("GUS" in s for s in row):
					del row[2:4]
					row[1] = 3
					row.append(2)
					controls.append(row)
				else: 
					del row[2:4]
					row[1] = 1
					row.append(2)
					controls.append(row)
			elif any("H2O" in s for s in row):
				if any ("BCR-ABL" in s for s in row):
					del row[2:4]
					row[1] = 2
					row.append(3)
					controls.append(row)
				elif any ("GUS" in s for s in row):
					del row[2:4]
					row[1] = 3
					row.append(3)
					controls.append(row)
				else: 
					del row[2:4]
					row[1] = 1
					row.append(3)
					controls.append(row)
			elif any("Standard" in s for s in row):
				if any ("BCR-ABL" in s for s in row):
					del row[2:4]
					row[1] = 2
					standards.append(row)
				elif any ("GUS" in s for s in row):
					del row[2:4]
					row[1] = 3
					standards.append(row)
				else:
					del row[2:4]
					row[1] = 1
					standards.append(row)
			elif any("B" in s for s in row[1]) and not any("Experiment" in s for s in row):
				if any ("BCR-ABL" in s for s in row):
					del row[2:4]
					row.append(2)
					row[1] = row[1][0:8]
					samples.append(row)
				elif any ("GUS" in s for s in row):
					del row[2:4]
					row.append(3)
					row[1] = row[1][0:8]
					samples.append(row)
				else:
					del row[2:4]
					row.append(1)
					row[1] = row[1][0:8]
					samples.append(row)

#Function adds standard labels for ABL tests
def bcrabllabel(standard):
	for result in standard[0:2]:
		result.append(1)
	for result in standard[2:4]:
		result.append(2)
	for result in standard[4:6]:
		result.append(3)
	for result in standard[6:8]:
		result.append(4)
	for result in standard[8:10]:
		result.append(5)
	for result in standard[10:12]:
		result.append(6)
	for result in standard[12:14]:
		result.append(7)

#Function adds standard labels for GUSB tests
def guslabel(standard):
	for result in standard[0:2]:
		result.append(8)
	for result in standard[2:4]:
		result.append(9)
	for result in standard[4:6]:
		result.append(10)
	for result in standard[6:8]:
		result.append(11)
	for result in standard[8:10]:
		result.append(12)
	for result in standard[10:12]:
		result.append(13)
	for result in standard[12:14]:
		result.append(14)

#Function sorts the standard results 
def standardsort(standard):
	abl = [] 
	bcr = []
	gus = []
	for row in standard:
		if row[1] == 2:
			bcr.append(row)
		if row[1] == 1:
			abl.append(row)
		if row[1] == 3:
			gus.append(row)
	if len(gus) == 0:
		bcrabllabel(bcr)
		bcrabllabel(abl)
		for row in bcr:
			standardresults.append(row)
		for row in abl:
			standardresults.append(row)
	else:
		guslabel(bcr)
		guslabel(gus)
		for row in bcr:
			standardresults.append(row)
		for row in gus:
			standardresults.append(row)
	for row in standardresults:
		if len(row) == 11:
			del row[2]

			
#***** SQL Functions ********

def insertcontrols(controls): 
	if controls:
		for result in controls:
			cursor.execute(controlinsert, result)
			cursor.execute(controlinsert2)
	cnx.commit()

def insertstandards(standards):
	if standards:
		for result in standards:
			cursor.execute(standardinsert1, result)
			cursor.execute(standardinsert2)
	cnx.commit()

def insertsamples(samples):
	if samples:
		for result in samples:
			sampleid = result[1]
			del result[1]
			print result
			print sampleid
			cursor.execute(sampleinsert1, result)
			cursor.execute(sampleinsert2, (sampleid,))
	cnx.commit()
		

