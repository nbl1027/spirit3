#This script handles the parsing of the result csv file and calculations for Plate QC and sample analysis as part of the SPIRIT 3 clinical trials system.
#Referenced by views.py 


#**** Imports relevant libraries ****
import csv
from Tkinter import * 
from tkFileDialog import * 
import mysql.connector
from datetime import datetime
import numpy as np
from scipy import stats


#***** Database Connection & Cursor *****
cnx = mysql.connector.connect(user='kirsty', password='ngskirsty_201605', host='10.229.233.250', database = 'spirit3')
cursor = cnx.cursor()


#**** SQL Statements *****

#Inserts Control Results into database. 
controlinsert = (""" 
		INSERT INTO controlresults(wellnumber, resulttypeid, controlct, controlctmean, controlquant, controlquantmean,     			controlctthresh, controlbasestart, controlbaseend, controltypeid)
		VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s);""")
		
controlinsert2 = ("""
		  INSERT INTO plate2control(controlresultid, plateid) 
		  VALUES (LAST_INSERT_ID(), (SELECT plateid FROM plate ORDER BY plateid DESC LIMIT 1));
 		  """)

#Inserts Standard Results into database
standardinsert1 = ("""  
		 INSERT INTO standardresults(wellnumber, resulttypeid, standardct, standardctmean, standardquant, standardquantmean, 			 standardctthresh, standardbasestart, standardbaseend, standardtypeid)
		 VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s);""")

standardinsert2= ("""
		 INSERT INTO plate2standard(standardresultid, plateid)
		 VALUES (LAST_INSERT_ID(), (SELECT plateid FROM plate ORDER BY plateid DESC LIMIT 1));
		 """)

#Inserts sample results into the database
sampleinsert1 = ("""
		INSERT INTO sampleresult(wellnumber, samplect, samplectmean, samplequant, samplequantmean, 			     			samplectthresh, samplebasestart, samplebaseend, resulttypeid)
        	VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s);""")

sampleinsert2 = ("""
		INSERT INTO sampleseg(sampleresultid, sampleid, plateid)
		VALUES (LAST_INSERT_ID(), (SELECT sampleid FROM samples WHERE samplenumber= %s), (SELECT plateid FROM plate ORDER BY plateid DESC LIMIT 1));
		""") 

#Selects standardids from plate
standardselect = (""" 
		SELECT standardresultid FROM plate2standard WHERE plateid = (SELECT plateid FROM plate ORDER BY plateid DESC LIMIT 1);
 		""")

#Selects the standard results
standardresult= (""" 
		SELECT * FROM standardresults WHERE standardresultid = %s
	       """)

#Selects control ids from plate 
controlselect = (""" 
		SELECT controlresultid FROM plate2control WHERE plateid = (SELECT plateid FROM plate ORDER BY plateid DESC LIMIT 1);
		""")

#Selects the control results 
controlresults = ("""
		  SELECT * FROM controlresults WHERE controlresultid = %s
		 """)

#Selects the standard curve which is needed for analysis
standardcurveselect = ("""
			SELECT * FROM standardcurve WHERE standardcurveid = %s;
		       """) 

#Inserts calculated insertreplicatect into database
insertreplicatect = ("""
		     INSERT INTO replicatect(replicatect, resulttypeid, standardtypeid, plateid)
		     VALUES (%s, %s, %s, (SELECT plateid FROM plate ORDER BY plateid DESC LIMIT 1));
		    """) 

#Inserts QC check results
insertplateqcresults = (""" 
			INSERT INTO plateqc(watercheck, negcheck, thresholdcheck, baselinecheck, poscheck, stdcurve2050, 				stdcurvepoints, slopecheck, correlationcheck, resulttypeid, plateid) 
			VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, (SELECT plateid FROM plate ORDER BY plateid DESC LIMIT 1));
			""")

#Inserts overall Pass/Fail result
insertqcresult = (""" INSERT INTO plateqcresult(plateid, passfailid)
		  VALUES ((SELECT plateid FROM plate ORDER BY plateid DESC LIMIT 1), %s);
		  """)

#Selects the SampleIDs for the Results 
IDselect = (""" 
	   SELECT * FROM sampleseg WHERE plateid = (SELECT plateid FROM plate ORDER BY plateid DESC LIMIT 1);
	   """)

#Seletcs the Sample Results
resultsample = (""" 
		SELECT * FROM sampleresult WHERE sampleresultid = %s;
		""")

#Inserts the ABL result QC analysis into the database
insertablgusqc = (""" 
	       INSERT INTO ablresutqc(sampleid, ablanalysis, totalcheck, individualcheck, qcresult)
	       VALUES (%s, %s, %s, %s, %s);
	       """)

#Inserts the Sample analysis results into the database
insertbcrresult = (""" 
	       INSERT INTO resultanalysis(sampleid, BCRcopies, BCRABLratio, percentageratio, mr, sensitivity, statementsid, 			responseid)
	       VALUES (%s, %s, %s, %s, %s, %s, %s, %s);
	       """)


#*** Internal Functions *****

#Function adds standard labels for ABL tests
def bcrabllabel(standard):
	for result in standard[0:2]:
		result.append(1)
	for result in standard[2:4]:
		result.append(2)
	for result in standard[4:6]:
		result.append(3)
	for result in standard[6:8]:
		result.append(4)
	for result in standard[8:10]:
		result.append(5)
	for result in standard[10:12]:
		result.append(6)
	for result in standard[12:14]:
		result.append(7)

#Function adds standard labels for GUSB tests
def guslabel(standard):
	for result in standard[0:2]:
		result.append(8)
	for result in standard[2:4]:
		result.append(9)
	for result in standard[4:6]:
		result.append(10)
	for result in standard[6:8]:
		result.append(11)
	for result in standard[8:10]:
		result.append(12)
	for result in standard[10:12]:
		result.append(13)
	for result in standard[12:14]:
		result.append(14)

#Function removes duplicates from a list
def removeduplicates(values):
	output = []
	seen = set()
	for value in values:
		if value not in seen:
			output.append(value)
			seen.add(value)
	return output


#**** Referenced Functions *****

#Function parses the results file and adds results to the database
def resultentry(csv):

	#Variables used in the function
	controls = []
	standards = []
	samples = []
	standardresults = []
	bcrablsample = []
	ablsample = []
	abl = [] 
	bcr = []
	gus = []

	#Section checks for the date of the run within the CSV file and adds it to the DB. 
	if csv: 
		try:
			dateofrun = csv[3][1]
			dateofrun = dateofrun[0:10]
			dateofrun = datetime.strptime(dateofrun, '%Y-%m-%d')
			dateofrun = datetime.date(dateofrun)
			cursor.execute("""INSERT INTO plate(dateofrun)
			VALUES (%s)""", ((dateofrun,)))
			cnx.commit()
		except:
			raise Exception ('The plate has no date. Please add a date')
	#Section parsed the csv file and sorts the results into Contols/Standards/Samples

		for row in csv:
			if any("POS" in s for s in row):
				if any ("BCR-ABL" in s for s in row):
					del row[2:4]
					row[1] = 2
					row.append(1)
					controls.append(row)
				elif any ("GUS" in s for s in row):
					del row[2:4]
					row[1] = 3
					row.append(1)
					controls.append(row)
				else:
					del row[2:4]
					row[1] = 1
					row.append(1)
					controls.append(row)
			elif any("NEG" in s for s in row): 
				if any ("BCR-ABL" in s for s in row):
					del row[2:4]
					row[1] = 2
					row.append(2)
					controls.append(row)
				elif any ("GUS" in s for s in row):
					del row[2:4]
					row[1] = 3
					row.append(2)
					controls.append(row)
				else: 
					del row[2:4]
					row[1] = 1
					row.append(2)
					controls.append(row)
			elif any("H2O" in s for s in row):
				if any ("BCR-ABL" in s for s in row):
					del row[2:4]
					row[1] = 2
					row.append(3)
					controls.append(row)
				elif any ("GUS" in s for s in row):
					del row[2:4]
					row[1] = 3
					row.append(3)
					controls.append(row)
				else: 
					del row[2:4]
					row[1] = 1
					row.append(3)
					controls.append(row)
			elif any("Standard" in s for s in row):
				if any ("BCR-ABL" in s for s in row):
					del row[2:4]
					row[1] = 2
					standards.append(row)
				elif any ("GUS" in s for s in row):
					del row[2:4]
					row[1] = 3
					standards.append(row)
				else:
					del row[2:4]
					row[1] = 1
					standards.append(row)
			elif any("B" in s for s in row[1]) and not any("Experiment" in s for s in row):
				if any ("BCR-ABL" in s for s in row):
					del row[2:4]
					row.append(2)
					row[1] = row[1][0:8]
					samples.append(row)
				elif any ("GUS" in s for s in row):
					del row[2:4]
					row.append(3)
					row[1] = row[1][0:8]
					samples.append(row)
				else:
					del row[2:4]
					row.append(1)
					row[1] = row[1][0:8]
					samples.append(row)

		#Section sorts and labels the standards with reference to the database designation 
		for row in standards:
			if row[1] == 2:
				bcr.append(row)
			if row[1] == 1:
				abl.append(row)
			if row[1] == 3:
				gus.append(row)
		if len(gus) == 0:
			bcrabllabel(bcr)
			bcrabllabel(abl)
			for row in bcr:
				standardresults.append(row)
			for row in abl:
				standardresults.append(row)
		else:
			guslabel(bcr)
			guslabel(gus)
			for row in bcr:
				standardresults.append(row)
			for row in gus:
				standardresults.append(row)

		#Section trims results which contain extra values seen in some files
		for row in standardresults:
			if len(row) == 11:
				del row[2]
		for row in controls:
			if len(row) == 11:
				del row[2]
		for row in samples:
			if len(row) == 11:
				del row[2]

		#Section adds all results to the database
		for result in controls:
			cursor.execute(controlinsert, result)
			cursor.execute(controlinsert2)
		cnx.commit()
		for result in standards:
			cursor.execute(standardinsert1, result)
			cursor.execute(standardinsert2)
		cnx.commit()
		for result in samples:
			sampleid = result[1]
			del result[1]
			cursor.execute(sampleinsert1, result)
			cursor.execute(sampleinsert2, (sampleid,))
		cnx.commit()



#Function calculates the Plate QC for the result entry 
def plateqc(csv): 

	#Variables used in the funcion 
	std = []
	cntrl = []
	bcrplateqc = []
	ablgusplateqc =[]
	replicatectresult = []
	ablgusstdcurve = []
	bcrstdcurve = []
	totalplateqc = []
	ablgush2oarray = []
	ablgusnegarray = []
	bcrh2oarray = []
	bcrnegarray = []
	ablgusthresharray = []
	bcrthresharray = []
	ablgus = []
	bcr = []
	ablguspoint = []
	bcrpoint = []
	count1 = 0
	count2 = 0
	index = 0
	if csv: 

	#Selects the relevant standards from the database
		cursor.execute(standardselect)
		standardresults = cursor.fetchall()
		for result in standardresults:
			cursor.execute(standardresult, result)	
			pick = list(cursor.fetchone())
			std.append(pick)

	#Selects the relevant controls from the database
		cursor.execute(controlselect)
		controlresult = cursor.fetchall()
		for result in controlresult:
			cursor.execute(controlresults, result)
			pick = list(cursor.fetchone())
			cntrl.append(pick)

	#Carrys out water, negative and threshold plate checks. 
		for result in cntrl:
			if result[2] == 1 or result[2] == 3:
				if result[1] == 3:
					ablgush2oarray.append(result[4])
					ablgusthresharray.append(result[8])
				elif result[1] == 2:
					ablgusnegarray.append(result[4])
			if result[2] == 2:
				if result[1] == 3:
					bcrh2oarray.append(result[4])
					bcrthresharray.append(result[8])
				elif result[1] == 2:
					bcrnegarray.append(result[4])
		if ablgush2oarray[0] == 0 and ablgush2oarray[1] == 0:
			ablgusplateqc.append(1)
		else:
			ablgusplateqc.append(2)
		if bcrh2oarray[0] == 0 and bcrh2oarray[1] == 0:
			bcrplateqc.append(1)
		else:
			bcrplateqc.append(2)
		if ablgusnegarray[0] == 0 and ablgusnegarray[1] == 0 and ablgusnegarray[2] ==0:
			ablgusplateqc.append(1)
		else: 
			ablgusplateqc.append(2)
		if bcrnegarray[0] == 0 and bcrnegarray[1] == 0 and bcrnegarray[2] ==0:
			bcrplateqc.append(1)
		else: 
			bcrplateqc.append(2)
		if ablgusthresharray[1] == 0.1:
			ablgusplateqc.append(1)
		else:
			ablgusplateqc.append(2)
		if bcrthresharray[1] == 0.1:
			bcrplateqc.append(1)
		else: 
			bcrplateqc.append(2)

	#Carrys out Baseline calculations and checks. 
		for row in std:
			temparray = []
			if row[1] == 1 or row[1] == 8:
				if row[2] == 1 or row[2] == 3:
					temparray.append(row[4])
					ablgusct = temparray[0]
				if row[2] == 2:
					temparray.append(row[4])
					bcrct = temparray[0]
		for row in cntrl:
			temparray = []
			if row[1] == 3 and row[2] == 1 or row[2] == 3:
				temparray.append(row[10])
				ablgusbaseline = temparray[0]
			if row[1] == 3 and row[2] == 2:
				temparray.append(row[10])
				bcrbaseline = temparray[0]
		bcrbaseline3 = bcrct - bcrbaseline 
		ablgusbaseline3 = ablgusct - ablgusbaseline
		if bcrbaseline3 >=3 and bcrbaseline3 <=4:
			bcrplateqc.append(1)
		else:
			bcrplateqc.append(2)
		if ablgusbaseline3 >=3 and ablgusbaseline3 <=4:
			ablgusplateqc.append(1)
		else:
			ablgusplateqc.append(2)

	#Carrys out Pos Delta CT calculations and checks. 
		temparray1 = []
		temparray2 = []
		for row in cntrl:
			if row[1] == 1:
				if row[2] == 1 or row[2] == 3:
					temparray1.append(row[4])
				if row[2] == 2:
					temparray2.append(row[4])
		ablguspos = temparray1[2] - temparray1[0]
		bcrpos = temparray2[2] - temparray2[0]
		if ablguspos <= 0.5 and ablguspos >=0.001:
			ablgusplateqc.append(1)
		else:
			ablgusplateqc.append(2)
		if bcrpos <= 0.5 and bcrpos >=0.001:
			bcrplateqc.append(1)
		else:
			bcrplateqc.append(2)

	#Calculates the replicate ct values and carries out replicatect and 20/50 and standard curve point checks. 
		for row in std:
			if row[2] == 1 or row[2] == 3:
				ablgus.append(row[4])
			else:
				bcr.append(row[4])
		for number in ablgus:
			index += 1
			if index >=1 and index %2 != 0:
				count1 += 1
				index2 = index - 1
				repct = ablgus[index] - ablgus[index2]
				ablgusresult = [repct, 4, count1]
				replicatectresult.append(ablgusresult)
				if ablgusresult[2] == 7:
					if ablgusresult[0] <=1.5:
						ablgusplateqc.append(1)
					else: 
						ablgusplateqc.append(2)
				if ablgusresult[2] <= 6:
					ablguspoint.append(ablgusresult[0])
		index = 0
		for number in bcr:
			index += 1
			if index >=1 and index %2 != 0:
				count2 += 1
				bcrresult = []
				index2 = index - 1
				repct = bcr[index] - bcr[index2]
				bcrresult = [repct, 2, count2]
				replicatectresult.append(bcrresult)
				if bcrresult[2] == 7:
					if bcrresult[0] <=1.5:
						bcrplateqc.append(1)
					else:
						bcrplateqc.append(2)
				if bcrresult[2] <= 6:
					bcrpoint.append(bcrresult[0])
		if ablguspoint[0] <=1 and ablguspoint[1] <=1 and ablguspoint[2] <=1 and ablguspoint[3] <=1 and ablguspoint[4] <=1 and ablguspoint[5] <=1:
			ablgusplateqc.append(1)
		else:
			ablgusplateqc.append(2)
		if bcrpoint[0] <=1 and bcrpoint[1] <=1 and bcrpoint[2] <=1 and bcrpoint[3] <=1 and bcrpoint[4] <=1 and bcrpoint[5] <=1:
			bcrplateqc.append(1)
		else:
			bcrplateqc.append(2)

	#Selects curve for analysis and calculates the slope, intercept and correlation of the curve and checks.
		curveselect = []
		for row in std:
			if row[2] == 1 or row[2] == 3:
				curveselect.append(row)
				ablgusstdcurve.append(row[5])
			else:
				bcrstdcurve.append(row[5])
		for row in curveselect:
			if row[1] == 14:
				if row[6] == 20:
					curve = 7
				else:
					curve = 8
			if row[1] == 7:
				if row[6] == 50:
					curve = 8
				elif row[6] == 20:
					curve = 7
				else:
					curve = 9
		cursor.execute(standardcurveselect, (curve,))
		stdcurve = list(cursor.fetchone())
		del stdcurve[0:2]
		bcrslope, bcrintercept, bcrr_value, p_value, std_err = stats.linregress(stdcurve, bcrstdcurve)
		ablgusslope, ablgusintercept, ablgusr_value, p_value, std_err = stats.linregress(stdcurve, ablgusstdcurve)
		if ablgusslope <=3.6 and ablgusslope >=3.2:
			ablgusplateqc.append(1)
		else:
			ablgusplateqc.append(2)
		if bcrslope <=3.6 and bcrslope >=3.2:
			bcrplateqc.append(1)
		else:
			bcrplateqc.append(2)
		if ablgusr_value > 0.98:
			ablgusplateqc.append(1)
		else:
			ablgusplateqc.append(2)
		if bcrr_value > 0.98:
			bcrplateqc.append(1)
		else:
			bcrplateqc.append(2)

	#Pass/Fail Plate Result check 
		plateqc = bcrplateqc + ablgusplateqc 
		bcrplateqc.append(2)
		ablgusplateqc.append(4)
		totalplateqc.append(bcrplateqc)
		totalplateqc.append(ablgusplateqc)	
		if 2 in plateqc:
			plateresult = 2
		else:
			plateresult = 1

	#Adds all results to the database 
		for result in replicatectresult:
 			cursor.execute(insertreplicatect, result)
		cursor.execute("""
	       		INSERT INTO standardcurvecriteria(resulttypeid, slope, correlation, intercept, baseline3, posdeltact, plateid)
	       		VALUES (%s, %s, %s, %s, %s, %s, (SELECT plateid FROM plate ORDER BY plateid DESC LIMIT 1));
	      		 """ % (2, bcrslope, bcrr_value, bcrintercept, bcrbaseline3, bcrpos,))
		cursor.execute("""
	      		INSERT INTO standardcurvecriteria(resulttypeid, slope, correlation, intercept, baseline3, posdeltact, plateid)
	      		VALUES (%s, %s, %s, %s, %s, %s, (SELECT plateid FROM plate ORDER BY plateid DESC LIMIT 1));
	       		""" % (4, ablgusslope, ablgusr_value, ablgusintercept, ablgusbaseline3, ablguspos,))
		for row in totalplateqc:
			cursor.execute(insertplateqcresults, row)
		cursor.execute(insertqcresult, (plateresult,))

	#Commits results to database
		cnx.commit() 



#Function calculates the analysis of sample results from the results entered
def sampleresult(csv):

	#Variables used in the funcion 
	IDresults = []
	IDdict = {}
	sampleresultid = []
	sampleid = []
	sampleresults = []
	ablgussample = []
	bcrsample = []
	ablgusqcresult = []
	bcrablresult = []
	recentresult = []

	#Selects the samples IDs and result IDs from the DB
	if csv:
		cursor.execute(IDselect)
		ID = cursor.fetchall()
		for row in ID:
			IDresults.append(list(row))
		for row in IDresults:
			IDdict[row[2]] = row[1]
			sampleresultid.append(row[2])
			sampleid.append(row[1])

	#Selects sample results from the DB and seperates
		for row in sampleresultid:
			cursor.execute(resultsample, (row,))
			pick = list(cursor.fetchone())
			sampleresults.append(pick)
		sampleids = removeduplicates(sampleid)
		for result in sampleresults:
			sid = IDdict.get(result[0])
			result.append(sid)
			if result[1] == 1 or result[1] == 3:
				ablgussample.append(result)
			else:
				bcrsample.append(result)

	#Carries out sample result ABLQC
		for ids in sampleids:
			temp = []
			temp2 = []
			for row in ablgussample:
				if row[10] == ids:
					temp.append(row[5])
			yes = sum(temp)
			temp2.append(ids)
			temp2.append(yes)
			if temp[0] >= 10000 and temp[1] >= 10000 and temp[2] >= 10000:
				temp2.append(1)
			else:
				temp2.append(2)
			if yes >= 32000:
				temp2.append(1)
			else:
				temp2.append(2)
			if temp2[2] == 1:
				if temp2[3] == 1:
					temp2.append(1)
				elif temp2[3] == 2:
					temp2.append(3)
			else:
				temp2.append(2)
			ablgusqcresult.append(temp2)

	#Carries our BCR ABL analysis
		for ids in sampleids:
			temp = []
			temp2 = []
			temp3 = []
			for row in bcrsample:
				if row[10] == ids:
					temp.append(row[5])
					temp3.append(row[3])
			yes = sum(temp)
			temp2.append(ids)
			temp2.append(yes)
			for row in ablgusqcresult:
				if row[0] == ids:
					ratio = (yes / row[1]) * 1.4
					temp2.append(ratio)
					percentage = ratio * 100
					temp2.append(percentage)
					if ablgussample[0][1] == 3:
						if percentage <=10 and percentage >=1 and row[1] >=27000:
							temp2.append(1)
						elif percentage <=1 and percentage >0.1 and row[1] >=27000:
							temp2.append(2)
						elif percentage <=0.1 and percentage >0.01 and row[1] >=27000:
							temp2.append(3)
						elif percentage <=0.01 and percentage >0.0032 and row[1] >=27000 and row[1] <=86399:
							temp2.append(4)
						elif percentage <= 0.032 and percentage >0.001 and row[1] >=86400 and row[1] <=269999:
							temp2.append(4.5)
						elif percentage <= 0.001 and percentage >0.0001 and row[1] <=270000:
							temp2.append(5)
						else:
							temp2.append(0)
					else:
						if percentage <=10 and percentage >=1 and row[1] >=10000:
							temp2.append(1)
						elif percentage <=1 and percentage >0.1 and row[1] >=10000:
							temp2.append(2)
						elif percentage <=0.1 and percentage >0.01 and row[1] >=10000:
							temp2.append(3)
						elif percentage <= 0.01 and percentage >0.0032 and row[1] >=10000 and row[1] <=31999:
							temp2.append(4)
						elif percentage <= 0.032 and percentage >0.001 and row[1] >=32000 and row[1] <=99999:
							temp2.append(4.5)
						elif percentage <=0.001 and percentage >0.0001 and row[1] >=100000:
							temp2.append(5)
						else:
							temp2.append(0)
					sensitivity = 1 / row[1]
					temp2.append(sensitivity)
					if temp3[0] <=30 and temp3[0] >0:
						if temp3[1] <=30 and temp3[1] >0:
							if temp3[2] <=30 and temp3[2] >0:
								if (temp3[2] - temp3[0]) <0.5:
									temp2.append(12)
					if temp3[0] >= 30.1 and temp3[0] <=33:
						if temp3[1] >= 30.1 and temp3[1] <=33:
							if temp3[2] >= 30.1 and temp3[2] <=33: 
								if (temp3[2] - temp3[0]) <= 1:
									temp2.append(13)
					if temp3[0] >=33.1 and temp3[0] <=37:
						if temp3[1] >=33.1 and temp3[1] <=37:
							if temp3[2] >=33.1 and temp3[2] <=37:
								if (temp3[2] - temp3[0]) <= 1.5:
									temp2.append(14)
					if temp3[0] >=37.1 and temp3[1] >=37.1 and temp3[2] >=37.1:
						if (temp[2] - temp[0]) <=1.5:
							temp2.append(17)
					if np.count_nonzero(temp3) == 1:
						temp2.append(15)
					if np.count_nonzero(temp3) == 2:
						temp2.append(16)
					if sum(temp3) == 0:
						temp2.append(11)
					if len(temp2) == 6:
						temp2.append(19)

			#Calculates the treatment response and adss TKI to the sample
			cursor.execute("""SELECT patientid FROM samples where sampleid = (%s)""", ((ids,)))
			piid = cursor.fetchone()
			cursor.execute("""SELECT tkiid FROM patientinfo WHERE patientinfoid = (%s)""", (piid))
			TKI = cursor.fetchone()
			TKI = TKI[0]
			tkiadd = [ids, TKI]
			cursor.execute(""" UPDATE samples SET tkiid = (%s) WHERE sampleid = (%s)""", (tkiadd))
			samplesearch = [piid[0], TKI]
			cursor.execute("""Select sampleid FROM samples WHERE patientid = (%s) AND tkiid = (%s)""", (samplesearch))
			allpatsamps = cursor.fetchall()
			cleanallpatsamples = removeduplicates(allpatsamps)
			noofsamples = len(cleanallpatsamples)
			noofmonths = noofsamples * 3
			resultchecking = []
			resultchecking2 = []
			for yep in cleanallpatsamples:
				yep = yep[0]
				cursor.execute("""SELECT * FROM resultanalysis WHERE sampleid = (%s)""", ((yep,)))
				resultcheck = cursor.fetchall()
				for yeah in resultcheck:
					resultchecking.append(yeah[0])
			#for yep in resultchecking:
			#	cursor.execute("""SELECT * FROM resultanalysis WHERE sampleresultid = (%s)""", ((yep,)))
			#	resultcheck2 = cursor.fetchall()
			#	for yeah in resultcheck2:
			#		resultchecking2.append(yeah)
			print len(resultchecking)
			if len(resultchecking) != 0:
				if noofsamples >=2:
					for row in cleanallpatsamples:
						cursor.execute("""SELECT * FROM resultanalysis WHERE sampleid = (%s)""", (row))
						mostrecentresult = cursor.fetchall()
						recentresult.append(mostrecentresult[-1])
					resultsagain = []
					for row in recentresult:
						resultsagain.append(list(row))
					mmrresult1 = resultsagain[-1][4] #%BCR ABL for most recent 
					mmrresult2 = resultsagain[-2][4]
					if mmrresult2 <=0.1: #Checks to make sure there is no loss of MMR
						if mmrresult1 >0.1:
							if percentage >0.1:
								if mmrresult1 or percentage >1:
									rep = 3
			else:
				rep = 0
			if rep == 0 or rep is None:
				if TKI == 1 or TKI == 3:
					if noofmonths <= 3 and noofmonths <6:
						if percentage <10:
							rep = 1
						elif percentage >10:
							rep = 2
					elif noofmonths >=6 and noofmonths <12:
						if percentage <=1:
							rep = 1
						elif percentage >1 and percentage <=10:
							rep = 2
						elif percentage >10:
							rep = 3
					elif noofmonths >=12: 
						if percentage <=0.1:
							rep = 1
						elif percentage >0.1 and percentage <=1:
							rep = 2
						elif percentage>1:
							rep = 3	
				else:
					if noofmonths <=3 and noofmonths <6:
						if percentage <=10:
							rep = 1
						elif percentage >10:
							rep = 2
					if noofmonths >=6:
						if percentage <=1:
							rep = 1
						elif percentage >1 and percentage <=10:
							rep = 2
						elif thisresult[3] >10:
							rep=3
			temp2.append(rep)
			bcrablresult.append(temp2)
	
	#Inputs Results into Database 
		for result in ablgusqcresult:
			cursor.execute(insertablgusqc, result)
		for result in bcrablresult:
			cursor.execute(insertbcrresult, result)

	#Commits results to database
		cnx.commit() 


		
